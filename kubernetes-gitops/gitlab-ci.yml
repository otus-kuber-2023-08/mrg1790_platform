# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Bash.gitlab-ci.yml

# See https://docs.gitlab.com/ee/ci/yaml/index.html for all available options

# you can delete this line if you're not using Docker
image: alpine:latest

before_script:
  - echo "Before script section"
  - echo "For example you might run an update here or install a build dependency"
  - echo "Or  perhaps you might print out some debugging details"

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

k8s-cluster-creation:
  stage: .pre
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )' 
    - eval $(ssh-agent -s)
    - echo "$YC_AGENT_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $YC_AGENT_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
  #Подключаемся по SSH к VM с агентом Yandex Cloud. Проверяем наличие кластера, если кластер не создан, создаём кластер и ноды.
    - ssh $YC_AGENT_USERNAME@$YC_AGENT_IP 'PATH=/home/gitlab/yandex-cloud/bin:$PATH && if [[ -n $(yc managed-kubernetes cluster list | grep microservices-demo) ]] ;  then  echo "Кластер уже создан" ; else yc managed-kubernetes cluster create microservices-demo --service-account-name k8s-cluster-pgo --network-name default --node-service-account-name k8s-cluster-pgo ; yc k8s node-group create --cluster-name microservices-demo microservices-demo --fixed-size 4 --cores 4 --memory 8 ; fi '

build-adservice:
  image: docker:latest
  services:
    - docker
  stage: build
  script:
    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - |- 
        for ms in $microservices ; do 
         if [ $ms != cartservice ]; then 
           cd ${ms:0:-1}
           docker build -t mrg1790/${ms:0:-1}$CI_COMMIT_MESSAGE ./
           docker push mrg1790/${ms:0:-1}:$CI_COMMIT_MESSAGE
           cd .. ; 
         else 
           cd ${ms:0:-1}/src
           docker build -t mrg1790/${ms:0:-1}$CI_COMMIT_MESSAGE ./
           docker push mrg1790/${ms:0:-1}:$CI_COMMIT_MESSAGE
           cd .. ; cd ..
         fi ;
        done
    #- cd src/adservice
  #- docker build -t mrg1790/adservice:$CI_COMMIT_MESSAGE ./
   # - docker push mrg1790/adservice:$CI_COMMIT_MESSAGE
   #- cd src/cartservice/src
   #- docker build ./
   #


test1:
  stage: test
  script:
    - echo "Do a test here"
    - echo "For example run a test suite"

test2:
  stage: test
  script:
    - echo "Do another parallel test here"
    - echo "For example run a lint test"

deploy1:
  stage: deploy
  script:
    - echo "Do your deploy here"
  environment: production
